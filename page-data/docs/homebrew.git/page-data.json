{"componentChunkName":"component---src-templates-mirror-doc-tsx-content-file-path-d-repos-mirror-front-docs-zh-homebrew-git-mdx","path":"/docs/homebrew.git/","result":{"data":{"document":{"id":"3780163b-bd84-537f-adfa-9f21bd7e6218","body":"\n> 该镜像仍在施工中，可能无法正常工作\n\n**注：该镜像是 Homebrew / Linuxbrew 源程序以及 formula / cask 索引的镜像（即 `brew update` 时所更新内容）。镜像站同时提供相应的二进制预编译包的镜像（[Homebrew bottles](https://mirrors.zju.edu.cn/homebrew-bottles)） **\n\n镜像站提供了 https://github.com/Homebrew 组织下的以下 `repo`：`brew`, `homebrew-core`, `homebrew-cask`, `homebrew-cask-fonts`, `homebrew-cask-drivers`, `homebrew-cask-versions`, `homebrew-command-not-found`, `install`。\n\n### 日常使用（只使用 Homebrew bottles 镜像）\n\n```bash\nexport HOMEBREW_API_DOMAIN=\"https://mirrors.zju.edu.cn/homebrew-bottles/api\"\nexport HOMEBREW_BOTTLE_DOMAIN=\"https://mirrors.zju.edu.cn/homebrew-bottles\"\nexport HOMEBREW_PIP_INDEX_URL=\"https://mirrors.zju.edu.cn/pypi/web/simple/\"\n```\n\n### 首次安装 Homebrew / Linuxbrew\n\n首先，需要确保系统中安装了 bash、git 和 curl，对于 macOS 用户需额外要求安装 Command Line Tools (CLT) for Xcode。\n\n- 对于 macOS 用户，系统自带 bash、git 和 curl，在命令行输入 `xcode-select --install` 安装 CLT for Xcode 即可。\n- 对于 Linux 用户，系统自带 bash，仅需额外安装 git 和 curl。\n\n接着，在终端输入以下几行命令设置环境变量：\n\n```bash\nexport HOMEBREW_BREW_GIT_REMOTE=\"https://mirrors.zju.edu.cn/git/homebrew/brew.git\"\nexport HOMEBREW_CORE_GIT_REMOTE=\"https://mirrors.zju.edu.cn/git/homebrew/homebrew-core.git\"\nexport HOMEBREW_INSTALL_FROM_API=1\n# export HOMEBREW_API_DOMAIN\n# export HOMEBREW_BOTTLE_DOMAIN\n# export HOMEBREW_PIP_INDEX_URL\n```\n\n前往 [Homebrew bottles 镜像使用帮助](/docs/homebrew-bottles/)中「临时替换」一节设置好 `HOMEBREW_API_DOMAIN` 与 `HOMEBREW_BOTTLE_DOMAIN`。\n\n前往 [PyPI 镜像使用帮助](/docs/pypi/)中「Homebrew」一节设置好 `HOMEBREW_PIP_INDEX_URL`。\n\n_注：自 `brew` 4.0 起，`HOMEBREW_INSTALL_FROM_API` 会成为默认行为，无需设置；大部分用户无需再克隆 homebrew/core 仓库，故无需设置 `HOMEBREW_CORE_GIT_REMOTE` 环境变量。但若需要运行 `brew` 的开发命令或者 `brew` 安装在非官方支持的默认 prefix 位置，则仍需设置  `HOMEBREW_CORE_GIT_REMOTE` 环境变量；如果不想通过 API 安装，可以设置 `HOMEBREW_NO_INSTALL_FROM_API=1`。_\n\n最后，在终端运行以下命令以安装 Homebrew / Linuxbrew：\n\n```bash\n# 从镜像下载安装脚本并安装 Homebrew / Linuxbrew\ngit clone --depth=1 https://mirrors.zju.edu.cn/git/homebrew/install.git brew-install\n/bin/bash brew-install/install.sh\nrm -rf brew-install\n# 也可从 GitHub 获取官方安装脚本安装 Homebrew / Linuxbrew\n/bin/bash -c \"$(curl -fsSL https://github.com/Homebrew/install/raw/master/install.sh)\"\n```\n\n这样在首次安装的时候也可以使用镜像。更多信息请参考 [Homebrew 官方安装文档](https://docs.brew.sh/Installation)。\n\n_* 安装成功后需将 brew 程序的相关路径加入到环境变量中：_\n\n- _以下针对基于 Apple Silicon CPU 设备上的 macOS 系统（命令行运行 `uname -m` 应输出 `arm64`）上的 Homebrew：_\n\n  ```bash\n  test -r ~/.bash_profile && echo 'eval \"$(/opt/homebrew/bin/brew shellenv)\"' >> ~/.bash_profile\n  test -r ~/.zprofile && echo 'eval \"$(/opt/homebrew/bin/brew shellenv)\"' >> ~/.zprofile\n  ```\n\n  _对基于 Intel CPU 设备上的 macOS 系统（命令行运行 `uname -m` 应输出 `x86_64`）的用户可跳过本步。_\n\n- _以下针对 Linux 系统上的 Linuxbrew：_\n\n  ```bash\n  test -d ~/.linuxbrew && eval \"$(~/.linuxbrew/bin/brew shellenv)\"\n  test -d /home/linuxbrew/.linuxbrew && eval \"$(/home/linuxbrew/.linuxbrew/bin/brew shellenv)\"\n  test -r ~/.bash_profile && echo \"eval \\\"\\$($(brew --prefix)/bin/brew shellenv)\\\"\" >> ~/.bash_profile\n  test -r ~/.profile && echo \"eval \\\"\\$($(brew --prefix)/bin/brew shellenv)\\\"\" >> ~/.profile\n  test -r ~/.zprofile && echo \"eval \\\"\\$($(brew --prefix)/bin/brew shellenv)\\\"\" >> ~/.zprofile\n  ```\n\n  _参考了 [https://docs.brew.sh/Homebrew-on-Linux](https://docs.brew.sh/Homebrew-on-Linux)。_\n\n### 替换现有仓库上游\n\n替换 brew 程序本身的源，Homebrew / Linuxbrew 相同：\n\n```bash\n# export HOMEBREW_API_DOMAIN=\nexport HOMEBREW_BREW_GIT_REMOTE=\"https://mirrors.zju.edu.cn/git/homebrew/brew.git\"\nbrew update\n```\n\n前往 [Homebrew bottles 镜像使用帮助](/docs/homebrew-bottles/)中「临时替换」一节设置好 `HOMEBREW_API_DOMAIN`\n\n以下针对 macOS 系统上的 Homebrew：\n\n```bash\n# 手动设置\nexport HOMEBREW_CORE_GIT_REMOTE=\"https://mirrors.zju.edu.cn/git/homebrew/homebrew-core.git\"\n# 注：自 brew 4.0 起，大部分 Homebrew 用户无需设置 homebrew/core 和 homebrew/cask 镜像，只需设置 HOMEBREW_API_DOMAIN 即可。\n# 如果需要使用 Homebrew 的开发命令 (如 `brew cat <formula>`)，则仍然需要设置 homebrew/core 和 homebrew/cask 镜像。\n# 请按需执行如下两行命令：\nbrew tap --custom-remote --force-auto-update homebrew/core https://mirrors.zju.edu.cn/git/homebrew/homebrew-core.git\nbrew tap --custom-remote --force-auto-update homebrew/cask https://mirrors.zju.edu.cn/git/homebrew/homebrew-cask.git\n# 除 homebrew/core 和 homebrew/cask 仓库外的 tap 仓库仍然需要设置镜像\nbrew tap --custom-remote --force-auto-update homebrew/cask-fonts https://mirrors.zju.edu.cn/git/homebrew/homebrew-cask-fonts.git\nbrew tap --custom-remote --force-auto-update homebrew/cask-drivers https://mirrors.zju.edu.cn/git/homebrew/homebrew-cask-drivers.git\nbrew tap --custom-remote --force-auto-update homebrew/cask-versions https://mirrors.zju.edu.cn/git/homebrew/homebrew-cask-versions.git\nbrew tap --custom-remote --force-auto-update homebrew/command-not-found https://mirrors.zju.edu.cn/git/homebrew/homebrew-command-not-found.git\nbrew update\n# 或使用下面的几行命令自动设置\nexport HOMEBREW_CORE_GIT_REMOTE=\"https://mirrors.zju.edu.cn/git/homebrew/homebrew-core.git\"\nfor tap in core cask{,-fonts,-drivers,-versions} command-not-found; do\n    brew tap --custom-remote --force-auto-update \"homebrew/${tap}\" \"https://mirrors.zju.edu.cn/git/homebrew/homebrew-${tap}.git\"\ndone\nbrew update\n```\n\n以下针对 Linux 系统上的 Linuxbrew：\n\n```bash\nexport HOMEBREW_CORE_GIT_REMOTE=\"https://mirrors.zju.edu.cn/git/homebrew/homebrew-core.git\"\n# 注：自 brew 4.0 起，使用默认 prefix (即 \"/home/linuxbrew/.linuxbrew\") 的大部分 Homebrew 用户无需设置 homebrew/core 镜像，只需设置 HOMEBREW_API_DOMAIN 即可。\n# 如果不是默认 prefix 或者需要使用 Homebrew 的开发命令 (如 `brew cat <formula>`)，则仍然需要设置 homebrew/core 镜像。\n# 请按需执行如下命令：\nbrew tap --custom-remote --force-auto-update homebrew/core https://mirrors.zju.edu.cn/git/homebrew/homebrew-core.git\n# 除 homebrew/core 仓库外的 tap 仓库仍然需要设置镜像\nbrew tap --custom-remote --force-auto-update homebrew/command-not-found https://mirrors.zju.edu.cn/git/homebrew/homebrew-command-not-found.git\nbrew update\n```\n\n**注：如果用户设置了环境变量 `HOMEBREW_BREW_GIT_REMOTE` 和 `HOMEBREW_CORE_GIT_REMOTE`，则每次执行 `brew update` 时，`brew` 程序本身和 Core Tap (`homebrew-core`) 的远程将被自动设置。推荐用户将这两个环境变量设置加入 shell 的 profile 设置中。**\n\n```bash\ntest -r ~/.bash_profile && echo 'export HOMEBREW_BREW_GIT_REMOTE=\"https://mirrors.zju.edu.cn/git/homebrew/brew.git\"' >> ~/.bash_profile  # bash\ntest -r ~/.bash_profile && echo 'export HOMEBREW_CORE_GIT_REMOTE=\"https://mirrors.zju.edu.cn/git/homebrew/homebrew-core.git\"' >> ~/.bash_profile\ntest -r ~/.profile && echo 'export HOMEBREW_BREW_GIT_REMOTE=\"https://mirrors.zju.edu.cn/git/homebrew/brew.git\"' >> ~/.profile\ntest -r ~/.profile && echo 'export HOMEBREW_CORE_GIT_REMOTE=\"https://mirrors.zju.edu.cn/git/homebrew/homebrew-core.git\"' >> ~/.profile\ntest -r ~/.zprofile && echo 'export HOMEBREW_BREW_GIT_REMOTE=\"https://mirrors.zju.edu.cn/git/homebrew/brew.git\"' >> ~/.zprofile  # zsh\ntest -r ~/.zprofile && echo 'export HOMEBREW_CORE_GIT_REMOTE=\"https://mirrors.zju.edu.cn/git/homebrew/homebrew-core.git\"' >> ~/.zprofile\n```\n\n对于 `HOMEBREW_API_DOMAIN` 与其余 bottles 相关环境变量的持久化，可以参考 [Homebrew Bottles 帮助](/docs/homebrew-bottles/)。\n\n_镜像迁移说明：Linuxbrew 核心仓库（`linuxbrew-core`）自 2021 年 10 月 25 日（`brew` 版本 3.3.0 起）被弃用，Linuxbrew 用户应迁移至 `homebrew-core`。Linuxbrew 用户请依新版镜像说明重新设置镜像。注意迁移前请先运行 `brew update` 将 `brew` 更新至 3.3.0 或以上版本。迁移过程中若出现任何问题，可使用如下命令重新安装 `homebrew-core`：_\n\n```bash\nexport HOMEBREW_CORE_GIT_REMOTE=\"https://mirrors.zju.edu.cn/git/homebrew/homebrew-core.git\"\nrm -rf \"$(brew --repo homebrew/core)\"\nbrew tap --custom-remote --force-auto-update homebrew/core https://mirrors.zju.edu.cn/git/homebrew/homebrew-core.git\n```\n\n### 复原仓库上游\n\n_(感谢 Snowonion Lee 提供说明)_\n\n```bash\n# brew 程序本身，Homebrew / Linuxbrew 相同\nunset HOMEBREW_API_DOMAIN\nunset HOMEBREW_BREW_GIT_REMOTE\ngit -C \"$(brew --repo)\" remote set-url origin https://github.com/Homebrew/brew\n# 以下针对 macOS 系统上的 Homebrew\nunset HOMEBREW_CORE_GIT_REMOTE\nBREW_TAPS=\"$(BREW_TAPS=\"$(brew tap 2>/dev/null)\"; echo -n \"${BREW_TAPS//$'\\n'/:}\")\"\nfor tap in core cask{,-fonts,-drivers,-versions} command-not-found; do\n    if [[ \":${BREW_TAPS}:\" == *\":homebrew/${tap}:\"* ]]; then  # 只复原已安装的 Tap\n        brew tap --custom-remote \"homebrew/${tap}\" \"https://github.com/Homebrew/homebrew-${tap}\"\n    fi\ndone\n# 以下针对 Linux 系统上的 Linuxbrew\nunset HOMEBREW_API_DOMAIN\nunset HOMEBREW_CORE_GIT_REMOTE\nbrew tap --custom-remote homebrew/core https://github.com/Homebrew/homebrew-core\nbrew tap --custom-remote homebrew/command-not-found https://github.com/Homebrew/homebrew-command-not-found\n# 重新拉取远程\nbrew update\n```\n\n**注：重置回默认远程后，用户应该删除 shell 的 profile 设置中的环境变量 `HOMEBREW_BREW_GIT_REMOTE` 和 `HOMEBREW_CORE_GIT_REMOTE` 以免运行 `brew update` 时远程再次被更换。**","slug":"/docs/homebrew.git/","title":null,"tags":[],"date":null,"tableOfContents":{"items":[{"url":"#日常使用只使用-homebrew-bottles-镜像","title":"日常使用（只使用 Homebrew bottles 镜像）"},{"url":"#首次安装-homebrew--linuxbrew","title":"首次安装 Homebrew / Linuxbrew"},{"url":"#替换现有仓库上游","title":"替换现有仓库上游"},{"url":"#复原仓库上游","title":"复原仓库上游"}]},"frontmatter":{"mirrorId":"homebrew","isGit":true}},"locales":{"edges":[{"node":{"ns":"translation","data":"{\"Blog\":\"Blog\",\"Email\":\"Email\",\"GitHub\":\"GitHub\",\"ISO\":\"ISO\",\"ZJU Mirror\":\"ZJU Mirror\",\"MirrorZ 镜像站项目\":\"MirrorZ 镜像站项目\",\"使用说明\":\"使用说明\",\"关于我们\":\"关于我们\",\"安装映像\":\"安装映像\",\"展开\":\"展开\",\"常用镜像\":\"常用镜像\",\"所有镜像\":\"所有镜像\",\"折叠\":\"折叠\",\"文件列表\":\"文件列表\",\"最近更新于 {{date}}\":\"最近更新于 {{date}}\",\"本镜像站提供了包括 Docker, PostgreSQL, Ubuntu 等项目源的镜像，以服务教育和科学研究为目的，提倡自由、平等、协作、共享的精神。\":\"本镜像站提供了包括 Docker, PostgreSQL, Ubuntu 等项目源的镜像，以服务教育和科学研究为目的，提倡自由、平等、协作、共享的精神。\",\"浅色\":\"浅色\",\"浙江大学信息技术中心\":\"浙江大学信息技术中心\",\"浙江大学开源软件镜像站\":\"浙江大学开源软件镜像站\",\"浙江大学开源软件镜像站是一个致力于普及开源软件，方便校内外用户高效访问开源项目的各种资源的非盈利计划。\":\"浙江大学开源软件镜像站是一个致力于普及开源软件，方便校内外用户高效访问开源项目的各种资源的非盈利计划。\",\"根据相关法律法规，本站不对欧盟用户提供服务。\":\"根据相关法律法规，本站不对欧盟用户提供服务。\",\"深色\":\"深色\",\"清华大学 TUNA 协会\":\"清华大学 TUNA 协会\",\"版本\":\"版本\",\"特别鸣谢\":\"特别鸣谢\",\"系统默认\":\"系统默认\",\"语言\":\"语言\",\"返回\":\"返回\",\"显示镜像目录名称\":\"显示镜像目录名称\",\"显示镜像名称\":\"显示镜像名称\",\"校外网络\":\"校外网络\",\"校内网络 - IPv4\":\"校内网络 - IPv4\",\"校内网络 - IPv6\":\"校内网络 - IPv6\",\"近期更新\":\"近期更新\",\"问题反馈与镜像请求（GitHub）\":\"问题反馈与镜像请求（GitHub）\"}","language":"zh"}}]}},"pageContext":{"id":"3780163b-bd84-537f-adfa-9f21bd7e6218","previousId":"72afb1b5-f535-56d1-be70-d540179ace19","nextId":"f1b205c5-21e4-5888-816b-16f640fc0818","frontmatter":{"mirrorId":"homebrew","isGit":true},"language":"zh","i18n":{"language":"zh","languages":["zh","en"],"defaultLanguage":"zh","generateDefaultLanguagePage":false,"routed":false,"originalPath":"/docs/homebrew.git/","path":"/docs/homebrew.git/"}}},"staticQueryHashes":["63159454"],"slicesMap":{}}